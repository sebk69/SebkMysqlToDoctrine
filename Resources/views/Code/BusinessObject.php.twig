<?php
{{ headComment }}
	
	namespace {{ businessNamespace }};
	
	use {{ namespace }}\{{ entityName }} as {{ entityName }}Entity;
	use {{ businessNamespace }}\{{ entityName }}Exception;
	use {{ namespace }}\{{ repositoryClass }};
	use Doctrine\ORM\EntityManager;
    use Symfony\Component\DependencyInjection\Container;
	/******Begin Custom Uses*/
	/******End Custom Uses*/
	
	/**
{% if fields is defined %}
{% for field in fields %}
	 * @method unkown get{{ field.functionName }}()
	 * @method set{{ field.functionName }}(unknown ${{ field.functionName }})
{% endfor %}
{% endif %}
	 */
	class {{ entityName }} implements BusinessObjectInterface
    /******Begin Custom Extends And Implements*/
    /******End Custom Extends And Implements*/
	{
		/**
		 * @var EntityManager
		 */
		private $entityManager;
		
		/**
		 * @var Container
		 */
		private $container;

		/**
		 * @var BusinessFactory
		 */
		private $factory;

		/**
		 * @var {{ entityName }}Entity
		 */
		private $entity;
		
		/**
		 * @var {{ repositoryClass }}
		 */
		protected $repository;
		
{% if manyToOne is defined %}
{% for manyToOneField in manyToOne %}
		/**
		 * @var {{ manyToOneField.functionName }}
		 */
		private ${{ manyToOneField.functionName }};
		
{% endfor %}
{% endif %}
{% if oneToMany is defined %}
{% for oneToManyField in oneToMany %}
		/**
		 * @var {{ oneToManyField.functionName }}
		 */
		private ${{ oneToManyField.name }};
		
{% endfor %}
{% endif %}
{% if manyToMany is defined %}
{% for manyToManyField in manyToMany %}
		/**
		 * @var {{ manyToManyField.functionName }}
		 */
		private ${{ manyToManyField.name }};
		
{% endfor %}
{% endif %}
		/******Begin Custom Properties*/
		/******End Custom Properties*/
		
		/**
		 * {{ entityName }} constructor
		 * @param EntityManager $em
		 * @param Container $container
		 * @param BusinessFactory $factory
		 */
		public function __construct(EntityManager $em, Container $container, BusinessFactory $factory)
		{
			$this->entityManager = $em;
            $this->container = $container;
			$this->repository = $em->getRepository("{{ bundle }}:{{ entityName }}");
			$this->entity = new {{ entityName }}Entity;
            $this->factory = $factory;
		}
		
		/**
		 * Magic method for implement getters and setters of entity
		 * @param string $method
		 * @param string $arguments
		 * @return mixed
		 */
		public function __call($method, $arguments)
		{
            if(substr($method, 0, 3) == "get" || substr($method, 0, 3) == "set" || $method == "toArray")
			{
				if(method_exists($this->getEntity(), $method))
					return call_user_func_array(array($this->getEntity(), $method), $arguments);
			}
			
			trigger_error("Method '$method' does not exists in {{ entityName }} entity (Raised in business object __call)", E_USER_ERROR);
		}
		
		/**
		 * get entity property
		 * @return {{ entityName }}Entity
		 */
		public function getEntity()
		{
            if(@$this->entity === null) {
                $this->entity = new {{ entityName }}Entity;
            }
			return $this->entity;
		}
		
		/**
		 * set entity property
		 * @param {{ entityName }}Entity $entity
		 * @param boolean $force
         * @return $this
		 */
		public function setEntity($entity, $force = false)
		{
            if($entity !== null) {
                $this->entity = $entity;
            }
			
			return $this;
		}
		
{% if manyToOne is defined %}
{% for manyToOneField in manyToOne %}
		/**
		 * get {{ manyToOneField.functionName }} property
		 * @return {{ manyToOneField.functionName }}
		 */
		public function get{{ manyToOneField.functionName }}()
		{
			if($this->{{ manyToOneField.functionName }} === null)
			{
				$this->{{ manyToOneField.functionName }} = $this->factory->get('{{ manyToOneField.targetEntity }}');
				$this->{{ manyToOneField.functionName }}->setEntity($this->entity->get{{ manyToOneField.functionName }}());
			}
						
			return $this->{{ manyToOneField.functionName }};
		}
		
		/**
		 * set {{ manyToOneField.functionName }} property
		 * @param {{ manyToOneField.targetEntity }} ${{ manyToOneField.functionName }}
         * @return $this
		 */
		public function set{{ manyToOneField.functionName }}({{ manyToOneField.targetEntity }} ${{ manyToOneField.functionName }})
		{
			$this->{{ manyToOneField.functionName }} = ${{ manyToOneField.functionName }};
			return $this;
		}
		
{% endfor %}
{% endif %}
{% if oneToMany is defined %}
{% for oneToManyField in oneToMany %}
		/**
		 * get {{ oneToManyField.name }} collection
		 * @return {{ oneToManyField.targetEntity }}Collection
		 */
		public function get{{ oneToManyField.functionName }}()
		{
			if($this->{{ oneToManyField.name }} === null)
			{
				$this->{{ oneToManyField.name }} = $this->factory->get('{{ oneToManyField.targetEntity }}Collection');
				$this->{{ oneToManyField.name }}->addAndBuildFromEntities($this->entity->get{{ oneToManyField.functionName }}());
			}
			
			return $this->{{ oneToManyField.name }};
		}
		
{% endfor %}
{% endif %}
{% if manyToMany is defined %}
{% for manyToManyField in manyToMany %}
		/**
		 * get {{ manyToManyField.name }} collection
		 * @return {{ manyToManyField.targetEntity }}Collection
		 */
		public function get{{ manyToManyField.functionName }}()
		{
			if($this->{{ manyToManyField.name }} === null)
			{
				$this->{{ manyToManyField.name }} = $this->factory->get('{{ manyToManyField.targetEntity }}Collection');
				$this->{{ manyToManyField.name }}->addAndBuildFromEntities($this->entity->get{{ manyToManyField.functionName }}());
			}
			
			return $this->{{ manyToManyField.name }};
		}
		
{% endfor %}
{% endif %}
		/**
		 * persist object and dependencies
		 */
		public function persist()
		{
{% if manyToOne is defined %}
{% for manyToOneField in manyToOne %}
			if($this->{{ manyToOneField.functionName }} !== null) {
				$this->entity->set{{ manyToOneField.functionName }}($this->{{ manyToOneField.functionName }}->getEntity());
            }
{% endfor %}
{% endif %}
{% if oneToMany is defined %}
{% for oneToManyField in oneToMany %}
			if($this->{{ oneToManyField.name }} !== null) {
				$this->entity->set{{ oneToManyField.functionName }}($this->{{ oneToManyField.name }}->getEntity());
            }
{% endfor %}
{% endif %}
{% if manyToMany is defined %}
{% for manyToManyField in manyToMany %}
			if($this->{{ manyToManyField.name }} !== null) {
				$this->entity->set{{ manyToManyField.functionName }}($this->{{ manyToManyField.name }}->getEntities());
            }
{% endfor %}
{% endif %}
			$this->entityManager->persist($this->entity);
            $this->entityManager->flush();
		}
		
		/**
		 * Remove entity from db
		 */
		public function remove()
		{
            $reference = $this->entityManager->getReference('{{ bundle }}:{{ entityName }}', {% if id is defined %}array({% for ids in id %}'{{ ids.name }}' => $this->get{{ ids.functionName }}(), {% endfor %}){% endif %});
            $this->entityManager->remove($reference);
            $this->entityManager->flush();
		}

        public function dump() {
            \Doctrine\Common\Util\Debug::dump($this);
        }

        /**
         * Free object memory
         */
        public function free() {
{% if manyToOne is defined %}
{% for manyToOneField in manyToOne %}
            if(is_object($this->{{ manyToOneField.functionName }})) {
                $this->{{ manyToOneField.functionName }}->free();
            }
{% endfor %}
{% endif %}
            $this->entityManager->detach($this->entity);
            unset($this->entity);
            unset($this);
        }
		/******Begin Custom Methods*/
		/******End Custom Methods*/
	}